/*
 * Permission is hereby granted, free of charge, to any human obtaining a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit humans to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
use super::*;

struct ­ЮљГ­Юљъ­Юљг­ЮљГ_­Юљъ­Юљд­Юљб­ЮљГ­ЮљГ­Юљъ­ЮљФ {
    ­Юќ╝­ЮЌѕ­ЮЌЄ­ЮЌЇ­ЮќЙ­ЮЌЄ­ЮЌЇ: Vec<u8>,
}

impl ­ЮљГ­Юљъ­Юљг­ЮљГ_­Юљъ­Юљд­Юљб­ЮљГ­ЮљГ­Юљъ­ЮљФ {
    pub const fn new() -> Self {
        ­ЮљГ­Юљъ­Юљг­ЮљГ_­Юљъ­Юљд­Юљб­ЮљГ­ЮљГ­Юљъ­ЮљФ {
            ­Юќ╝­ЮЌѕ­ЮЌЄ­ЮЌЇ­ЮќЙ­ЮЌЄ­ЮЌЇ: Vec::<u8>::new(),
        }
    }
}

impl ­ЮЌХ­ЮЌ║­ЮЌй­ЮЌ╣­ЮЌ▓­ЮЌ║­ЮЌ▓­ЮЌ╗­ЮўЂ­ЮЌ«­ЮўЂ­ЮЌХ­ЮЌ╝­ЮЌ╗::­ЮњЃ­Юњџ­ЮњЋ­Юњє_­Юњє­Юњј­Юњі­ЮњЋ­ЮњЋ­Юњє­ЮњЊ for ­ЮљГ­Юљъ­Юљг­ЮљГ_­Юљъ­Юљд­Юљб­ЮљГ­ЮљГ­Юљъ­ЮљФ {
    type ­ЮљФ­Юљъ­Юљг­Юљ«­ЮљЦ­ЮљГ_­ЮљГ­Юљ▓­ЮљЕ­Юљъ = ();
    type ­Юљъ­ЮљФ­ЮљФ­Юље­ЮљФ_­ЮљГ­Юљ▓­ЮљЕ­Юљъ = ();

    fn emit_u8(&mut self, value: u8) -> Result<(), ()> {
        self.­Юќ╝­ЮЌѕ­ЮЌЄ­ЮЌЇ­ЮќЙ­ЮЌЄ­ЮЌЇ.push(value);
        Ok(())
    }
}

#[test]
fn test_add_­Юћъ­ЮћЕ_­Юћъ­ЮћЕ() {
    type ­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_16рхЄРЂ▒рхЌ =
        ­ЮљЏ­Юљџ­Юљг­Юљб­Юљю_­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_­Юћъ­ЮћА­ЮћА­Юћ»16_­ЮћА­Юћъ­Юћ▒­Юћъ16<'static, ­ЮљГ­Юљъ­Юљг­ЮљГ_­Юљъ­Юљд­Юљб­ЮљГ­ЮљГ­Юљъ­ЮљФ>;
    let mut raw_emitter = ­ЮљГ­Юљъ­Юљг­ЮљГ_­Юљъ­Юљд­Юљб­ЮљГ­ЮљГ­Юљъ­ЮљФ::new();
    ­ЮљЏ­Юљџ­Юљг­Юљб­Юљю_­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_­Юћъ­ЮћА­ЮћА­Юћ»16_­ЮћА­Юћъ­Юћ▒­Юћъ16::from(&mut raw_emitter)
        .add((­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_16рхЄРЂ▒рхЌ::­Юћъ­ЮћЕ, ­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_16рхЄРЂ▒рхЌ::­Юћъ­ЮћЕ))
        .expect("Testing assembler");
    assert_eq!(&[0, 0], &raw_emitter.­Юќ╝­ЮЌѕ­ЮЌЄ­ЮЌЇ­ЮќЙ­ЮЌЄ­ЮЌЇ[0..raw_emitter.­Юќ╝­ЮЌѕ­ЮЌЄ­ЮЌЇ­ЮќЙ­ЮЌЄ­ЮЌЇ.len()]);
}

#[test]
fn test_add_­Юћъ­ЮћЕ_­Юћъ­ЮћА­ЮћА­Юћ»­Юћб­Юћ░­Юћ░_16рхЄРЂ▒рхЌ_­ЮћЪ­Юћх_­Юћ░­Юћд() {
    type ­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_16рхЄРЂ▒рхЌ =
        ­ЮљЏ­Юљџ­Юљг­Юљб­Юљю_­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_­Юћъ­ЮћА­ЮћА­Юћ»16_­ЮћА­Юћъ­Юћ▒­Юћъ16<'static, ­ЮљГ­Юљъ­Юљг­ЮљГ_­Юљъ­Юљд­Юљб­ЮљГ­ЮљГ­Юљъ­ЮљФ>;
    let mut raw_emitter = ­ЮљГ­Юљъ­Юљг­ЮљГ_­Юљъ­Юљд­Юљб­ЮљГ­ЮљГ­Юљъ­ЮљФ::new();
    ­ЮљЏ­Юљџ­Юљг­Юљб­Юљю_­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_­Юћъ­ЮћА­ЮћА­Юћ»16_­ЮћА­Юћъ­Юћ▒­Юћъ16::from(&mut raw_emitter)
        .add((
            ­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_16рхЄРЂ▒рхЌ::­Юћъ­ЮћЕ,
            ­Юћъ­ЮћА­ЮћА­Юћ»­Юћб­Юћ░­Юћ░_16рхЄРЂ▒рхЌ
                .with_base(­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_16рхЄРЂ▒рхЌ::­ЮћЪ­Юћх)
                .with_index(­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_16рхЄРЂ▒рхЌ::­Юћ░­Юћд)
                .with_disp(0x1234i16),
        ))
        .expect("Testing assembler");
    assert_eq!(
        &[0, 0, 1, 3, 1, 6, 0x34, 0x12],
        &raw_emitter.­Юќ╝­ЮЌѕ­ЮЌЄ­ЮЌЇ­ЮќЙ­ЮЌЄ­ЮЌЇ[0..raw_emitter.­Юќ╝­ЮЌѕ­ЮЌЄ­ЮЌЇ­ЮќЙ­ЮЌЄ­ЮЌЇ.len()]
    );
}

#[test]
fn test_add_­Юћъ­ЮћЕ_­Юћъ­ЮћА­ЮћА­Юћ»­Юћб­Юћ░­Юћ░_32рхЄРЂ▒рхЌ_­Юћб­Юћ░­ЮћГ_­Юћб­ЮћЪ­ЮћГ() {
    type ­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_16рхЄРЂ▒рхЌ =
        ­ЮљЏ­Юљџ­Юљг­Юљб­Юљю_­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_­Юћъ­ЮћА­ЮћА­Юћ»16_­ЮћА­Юћъ­Юћ▒­Юћъ16<'static, ­ЮљГ­Юљъ­Юљг­ЮљГ_­Юљъ­Юљд­Юљб­ЮљГ­ЮљГ­Юљъ­ЮљФ>;
    let mut raw_emitter = ­ЮљГ­Юљъ­Юљг­ЮљГ_­Юљъ­Юљд­Юљб­ЮљГ­ЮљГ­Юљъ­ЮљФ::new();
    ­ЮљЏ­Юљџ­Юљг­Юљб­Юљю_­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_­Юћъ­ЮћА­ЮћА­Юћ»16_­ЮћА­Юћъ­Юћ▒­Юћъ16::from(&mut raw_emitter)
        .add((
            ­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_16рхЄРЂ▒рхЌ::­Юћъ­ЮћЕ,
            ­Юћъ­ЮћА­ЮћА­Юћ»­Юћб­Юћ░­Юћ░_32рхЄРЂ▒рхЌ
                .with_base(­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_16рхЄРЂ▒рхЌ::­Юћб­Юћ░­ЮћГ)
                .with_index(­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_16рхЄРЂ▒рхЌ::­Юћб­ЮћЪ­ЮћГ)
                .with_disp(0x12345678),
        ))
        .expect("Testing assembler");
    assert_eq!(
        &[0, 0, 1, 4, 1, 5, 1, 0x78, 0x56, 0x34, 0x12],
        &raw_emitter.­Юќ╝­ЮЌѕ­ЮЌЄ­ЮЌЇ­ЮќЙ­ЮЌЄ­ЮЌЇ[0..raw_emitter.­Юќ╝­ЮЌѕ­ЮЌЄ­ЮЌЇ­ЮќЙ­ЮЌЄ­ЮЌЇ.len()]
    );
}

#[test]
fn test_add_­Юћъ­ЮћЕ_­Юћъ­ЮћА­ЮћА­Юћ»­Юћб­Юћ░­Юћ░_64рхЄРЂ▒рхЌ_­Юћб­Юћ░­ЮћГ_­Юћб­ЮћЪ­ЮћГ() {
    type ­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_64рхЄРЂ▒рхЌ =
        ­ЮљЏ­Юљџ­Юљг­Юљб­Юљю_­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_­Юћъ­ЮћА­ЮћА­Юћ»64_­ЮћА­Юћъ­Юћ▒­Юћъ32<'static, ­ЮљГ­Юљъ­Юљг­ЮљГ_­Юљъ­Юљд­Юљб­ЮљГ­ЮљГ­Юљъ­ЮљФ>;
    let mut raw_emitter = ­ЮљГ­Юљъ­Юљг­ЮљГ_­Юљъ­Юљд­Юљб­ЮљГ­ЮљГ­Юљъ­ЮљФ::new();
    ­ЮљЏ­Юљџ­Юљг­Юљб­Юљю_­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_­Юћъ­ЮћА­ЮћА­Юћ»64_­ЮћА­Юћъ­Юћ▒­Юћъ32::from(&mut raw_emitter)
        .add((
            ­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_64рхЄРЂ▒рхЌ::­Юћъ­ЮћЕ,
            ­Юћъ­ЮћА­ЮћА­Юћ»­Юћб­Юћ░­Юћ░_32рхЄРЂ▒рхЌ
                .with_base(­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_64рхЄРЂ▒рхЌ::­Юћб­Юћ░­ЮћГ)
                .with_index(­Юљџ­Юљг­Юљг­Юљъ­Юљд­ЮљЏ­ЮљЦ­Юљъ­ЮљФ_64рхЄРЂ▒рхЌ::­Юћб­ЮћЪ­ЮћГ)
                .with_disp(0x12345678),
        ))
        .expect("Testing assembler");
    assert_eq!(
        &[0, 0, 1, 4, 1, 5, 1, 0x78, 0x56, 0x34, 0x12],
        &raw_emitter.­Юќ╝­ЮЌѕ­ЮЌЄ­ЮЌЇ­ЮќЙ­ЮЌЄ­ЮЌЇ[0..raw_emitter.­Юќ╝­ЮЌѕ­ЮЌЄ­ЮЌЇ­ЮќЙ­ЮЌЄ­ЮЌЇ.len()]
    );
}
