/*
 * Permission is hereby granted, free of charge, to any human obtaining a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit humans to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
#include "yace/foundation.h"

#include "yace/assembler/x86/constexpr_assembler.h"

#include "test_assembler.h"

namespace 𝘆𝗮𝗰𝗲::𝘅𝟴𝟲 {

// Static compile-time tests.

// Most assemblers in 𝔜𝔄ℭ𝔈 use compatible internal entities (registers, etc).
// Give short names for 𝒄𝒐𝒏𝒔𝒕𝒆𝒙𝒑𝒓_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓 to pull definitions from it.
using ⒜₁₆ = 𝒄𝒐𝒏𝒔𝒕𝒆𝒙𝒑𝒓_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓<&::𝘆𝗮𝗰𝗲::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔵86_16, &::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>>;
using ⒜ₐ₁₆ᵈ³² = 𝒄𝒐𝒏𝒔𝒕𝒆𝒙𝒑𝒓_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓<&::𝘆𝗮𝗰𝗲::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔵86_𝔞𝔡𝔡𝔯16_𝔡𝔞𝔱𝔞32, &::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>>;
using ⒜ₐ₃₂ᵈ¹⁶ = 𝒄𝒐𝒏𝒔𝒕𝒆𝒙𝒑𝒓_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓<&::𝘆𝗮𝗰𝗲::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔵86_𝔞𝔡𝔡𝔯32_𝔡𝔞𝔱𝔞16, &::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>>;
using ⒜₃₂ = 𝒄𝒐𝒏𝒔𝒕𝒆𝒙𝒑𝒓_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓<&::𝘆𝗮𝗰𝗲::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔵86_32, &::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>>;
using ⒜₆₄ = 𝒄𝒐𝒏𝒔𝒕𝒆𝒙𝒑𝒓_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓<&::𝘆𝗮𝗰𝗲::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔵86_64, &::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>>;

// Helpers for tests - use &::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱 to make sure we don't depend on &::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔡𝔢𝔣𝔞𝔲𝔩𝔱.
template <typename... 𝓽𝔂𝓹𝓮>
𝖞𝖆𝖈𝖊_𝖋𝖔𝖗𝖈𝖊𝖎𝖓𝖑𝖎𝖓𝖊 constexpr auto 𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟₁₆(𝓽𝔂𝓹𝓮... arg) {
  return 𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟<&::𝘆𝗮𝗰𝗲::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔵86_16, &::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>, 𝔠𝔬𝔫𝔰𝔱𝔢𝔵𝔭𝔯_𝔣𝔯𝔦𝔢𝔫𝔡𝔩𝔶>(arg...);
}
template <typename... 𝓽𝔂𝓹𝓮>
𝖞𝖆𝖈𝖊_𝖋𝖔𝖗𝖈𝖊𝖎𝖓𝖑𝖎𝖓𝖊 constexpr auto 𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟ₐ₁₆ᵈ³²(𝓽𝔂𝓹𝓮... arg) {
  return 𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟<&::𝘆𝗮𝗰𝗲::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔵86_𝔞𝔡𝔡𝔯16_𝔡𝔞𝔱𝔞32, &::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>, 𝔠𝔬𝔫𝔰𝔱𝔢𝔵𝔭𝔯_𝔣𝔯𝔦𝔢𝔫𝔡𝔩𝔶>(arg...);
}
template <typename... 𝓽𝔂𝓹𝓮>
𝖞𝖆𝖈𝖊_𝖋𝖔𝖗𝖈𝖊𝖎𝖓𝖑𝖎𝖓𝖊 constexpr auto 𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟ₐ₃₂ᵈ¹⁶(𝓽𝔂𝓹𝓮... arg) {
  return 𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟<&::𝘆𝗮𝗰𝗲::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔵86_𝔞𝔡𝔡𝔯32_𝔡𝔞𝔱𝔞16, &::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>, 𝔠𝔬𝔫𝔰𝔱𝔢𝔵𝔭𝔯_𝔣𝔯𝔦𝔢𝔫𝔡𝔩𝔶>(arg...);
}
template <typename... 𝓽𝔂𝓹𝓮>
𝖞𝖆𝖈𝖊_𝖋𝖔𝖗𝖈𝖊𝖎𝖓𝖑𝖎𝖓𝖊 constexpr auto 𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟₃₂(𝓽𝔂𝓹𝓮... arg) {
  return 𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟<&::𝘆𝗮𝗰𝗲::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔵86_32, &::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>, 𝔠𝔬𝔫𝔰𝔱𝔢𝔵𝔭𝔯_𝔣𝔯𝔦𝔢𝔫𝔡𝔩𝔶>(arg...);
}
template <typename... 𝓽𝔂𝓹𝓮>
𝖞𝖆𝖈𝖊_𝖋𝖔𝖗𝖈𝖊𝖎𝖓𝖑𝖎𝖓𝖊 constexpr auto 𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟₆₄(𝓽𝔂𝓹𝓮... arg) {
  return 𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟<&::𝘆𝗮𝗰𝗲::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔵86_64, &::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>, 𝔠𝔬𝔫𝔰𝔱𝔢𝔵𝔭𝔯_𝔣𝔯𝔦𝔢𝔫𝔡𝔩𝔶>(arg...);
}

// 16-bit memory access. Allowed in 16-bit mode and 32-bit mode.
// Tested options: ₛₖᵢₚ/𝔦𝔷/𝔫𝔬_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯/𝔟𝔵/𝔟𝔭 for base, ₛₖᵢₚ/𝔦𝔷/𝔫𝔬_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯/𝔰𝔦/𝔡𝔦 for index, ₛₖᵢₚ/0/1/1000 for disp.
#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘₁₆(𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮, 𝓫𝔁, 𝓫𝓹, 𝓼𝓲, 𝓭𝓲) \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘₁₆_𝖎𝖒𝖕𝖑( \
      𝓲𝔃, \
      (𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮{𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔫𝔬_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯}),  /* NOLINT(bugprone-macro-parentheses) */ \
      (𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮{𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔫𝔬_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯}), /* NOLINT(bugprone-macro-parentheses) */ \
      𝓫𝔁, \
      𝓫𝓹, \
      𝓼𝓲, \
      𝓭𝓲)
#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘₁₆_𝖎𝖒𝖕𝖑(𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓫𝔁, 𝓫𝓹, 𝓼𝓲, 𝓭𝓲) \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓲𝔃)), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻)), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓼𝓲)), 0x01, 0x04); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓭𝓲)), 0x01, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.disp = 0), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓲𝔃), .disp = 0), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 0), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓼𝓲), .disp = 0), 0x01, 0x04); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓭𝓲), .disp = 0), 0x01, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.disp = 1), 0x01, 0x06, 0x01, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓲𝔃), .disp = 1), 0x01, 0x06, 0x01, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 1), 0x01, 0x06, 0x01, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓼𝓲), .disp = 1), 0x01, 0x44, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓭𝓲), .disp = 1), 0x01, 0x45, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.disp = 1000), 0x01, 0x06, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓲𝔃), .disp = 1000), 0x01, 0x06, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 1000), 0x01, 0x06, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓼𝓲), .disp = 1000), 0x01, 0x84, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓭𝓲), .disp = 1000), 0x01, 0x85, 0xe8, 0x03); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃)), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .index = (𝓲𝔃)), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻)), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .index = (𝓼𝓲)), 0x01, 0x04); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .index = (𝓭𝓲)), 0x01, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .disp = 0), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .index = (𝓲𝔃), .disp = 0), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 0), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .index = (𝓼𝓲), .disp = 0), 0x01, 0x04); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .index = (𝓭𝓲), .disp = 0), 0x01, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .disp = 1), 0x01, 0x06, 0x01, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .index = (𝓲𝔃), .disp = 1), 0x01, 0x06, 0x01, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 1), 0x01, 0x06, 0x01, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .index = (𝓼𝓲), .disp = 1), 0x01, 0x44, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .index = (𝓭𝓲), .disp = 1), 0x01, 0x45, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .disp = 1000), 0x01, 0x06, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .index = (𝓲𝔃), .disp = 1000), 0x01, 0x06, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 1000), 0x01, 0x06, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .index = (𝓼𝓲), .disp = 1000), 0x01, 0x84, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓲𝔃), .index = (𝓭𝓲), .disp = 1000), 0x01, 0x85, 0xe8, 0x03); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻)), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓲𝔃)), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻)), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓼𝓲)), 0x01, 0x04); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓭𝓲)), 0x01, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 0), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓲𝔃), .disp = 0), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 0), 0x01, 0x06, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓼𝓲), .disp = 0), 0x01, 0x04); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓭𝓲), .disp = 0), 0x01, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 1), 0x01, 0x06, 0x01, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓲𝔃), .disp = 1), 0x01, 0x06, 0x01, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 1), 0x01, 0x06, 0x01, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓼𝓲), .disp = 1), 0x01, 0x44, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓭𝓲), .disp = 1), 0x01, 0x45, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 1000), 0x01, 0x06, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓲𝔃), .disp = 1000), 0x01, 0x06, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 1000), 0x01, 0x06, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓼𝓲), .disp = 1000), 0x01, 0x84, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓭𝓲), .disp = 1000), 0x01, 0x85, 0xe8, 0x03); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁)), 0x01, 0x07); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .index = (𝓲𝔃)), 0x01, 0x07); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻)), 0x01, 0x07); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .index = (𝓼𝓲)), 0x01, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .index = (𝓭𝓲)), 0x01, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .disp = 0), 0x01, 0x07); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .index = (𝓲𝔃), .disp = 0), 0x01, 0x07); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 0), 0x01, 0x07); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .index = (𝓼𝓲), .disp = 0), 0x01, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .index = (𝓭𝓲), .disp = 0), 0x01, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .disp = 1), 0x01, 0x47, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .index = (𝓲𝔃), .disp = 1), 0x01, 0x47, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 1), 0x01, 0x47, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .index = (𝓼𝓲), .disp = 1), 0x01, 0x40, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .index = (𝓭𝓲), .disp = 1), 0x01, 0x41, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .disp = 1000), 0x01, 0x87, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .index = (𝓲𝔃), .disp = 1000), 0x01, 0x87, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 1000), 0x01, 0x87, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .index = (𝓼𝓲), .disp = 1000), 0x01, 0x80, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝔁), .index = (𝓭𝓲), .disp = 1000), 0x01, 0x81, 0xe8, 0x03); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹)), 0x01, 0x46, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .index = (𝓲𝔃)), 0x01, 0x46, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻)), 0x01, 0x46, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .index = (𝓼𝓲)), 0x01, 0x02); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .index = (𝓭𝓲)), 0x01, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .disp = 0), 0x01, 0x046, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .index = (𝓲𝔃), .disp = 0), 0x01, 0x46, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 0), 0x01, 0x46, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .index = (𝓼𝓲), .disp = 0), 0x01, 0x02); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .index = (𝓭𝓲), .disp = 0), 0x01, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .disp = 1), 0x01, 0x46, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .index = (𝓲𝔃), .disp = 1), 0x01, 0x46, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 1), 0x01, 0x46, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .index = (𝓼𝓲), .disp = 1), 0x01, 0x42, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .index = (𝓭𝓲), .disp = 1), 0x01, 0x43, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .disp = 1000), 0x01, 0x86, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .index = (𝓲𝔃), .disp = 1000), 0x01, 0x86, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 1000), 0x01, 0x86, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .index = (𝓼𝓲), .disp = 1000), 0x01, 0x82, 0xe8, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓫𝓹), .index = (𝓭𝓲), .disp = 1000), 0x01, 0x83, 0xe8, 0x03)

// 16-bit assembler. Doesn't use address size prefix.
#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙(𝓪𝓭𝓭𝓻𝓮𝓼𝓼, ...) \
  static_assert(𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟₁₆(__VA_ARGS__).expected_from().add(⒜₁₆::𝒂𝒅𝒅𝒓𝒆𝒔𝒔₁₆<16>{𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓪𝓭𝓭𝓻𝓮𝓼𝓼}, ⒜₁₆::𝔞𝔵));
𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘₁₆(
    ⒜₁₆::𝔦𝔷,
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒃𝒂𝒔𝒆_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        16,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯16_𝔡𝔞𝔱𝔞16>),
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒊𝒏𝒅𝒆𝒙_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        16,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯16_𝔡𝔞𝔱𝔞16>),
    ⒜₁₆::𝔟𝔵,
    ⒜₁₆::𝔟𝔭,
    ⒜₁₆::𝔰𝔦,
    ⒜₁₆::𝔡𝔦);
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙

#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙(𝓪𝓭𝓭𝓻𝓮𝓼𝓼, ...) \
  static_assert(𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟ₐ₁₆ᵈ³²(__VA_ARGS__).expected_from().add(⒜ₐ₁₆ᵈ³²::𝒂𝒅𝒅𝒓𝒆𝒔𝒔₁₆<32>{𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓪𝓭𝓭𝓻𝓮𝓼𝓼}, ⒜ₐ₁₆ᵈ³²::𝔢𝔞𝔵));
𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘₁₆(
    ⒜ₐ₁₆ᵈ³²::𝔦𝔷,
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒃𝒂𝒔𝒆_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        16,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯16_𝔡𝔞𝔱𝔞32>),
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒊𝒏𝒅𝒆𝒙_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        16,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯16_𝔡𝔞𝔱𝔞32>),
    ⒜ₐ₁₆ᵈ³²::𝔟𝔵,
    ⒜ₐ₁₆ᵈ³²::𝔟𝔭,
    ⒜ₐ₁₆ᵈ³²::𝔰𝔦,
    ⒜ₐ₁₆ᵈ³²::𝔡𝔦);
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙

// 32-bit assembler. Uses address size prefix (0x67).
#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙(𝓪𝓭𝓭𝓻𝓮𝓼𝓼, ...) \
  static_assert( \
      𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟ₐ₃₂ᵈ¹⁶(0x67, __VA_ARGS__).expected_from().add(⒜ₐ₃₂ᵈ¹⁶::𝒂𝒅𝒅𝒓𝒆𝒔𝒔₁₆<16>{𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓪𝓭𝓭𝓻𝓮𝓼𝓼}, ⒜ₐ₃₂ᵈ¹⁶::𝔞𝔵));
𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘₁₆(
    ⒜ₐ₃₂ᵈ¹⁶::𝔦𝔷,
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒃𝒂𝒔𝒆_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        16,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯32_𝔡𝔞𝔱𝔞16>),
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒊𝒏𝒅𝒆𝒙_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        16,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯32_𝔡𝔞𝔱𝔞16>),
    ⒜ₐ₃₂ᵈ¹⁶::𝔟𝔵,
    ⒜ₐ₃₂ᵈ¹⁶::𝔟𝔭,
    ⒜ₐ₃₂ᵈ¹⁶::𝔰𝔦,
    ⒜ₐ₃₂ᵈ¹⁶::𝔡𝔦);
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙

#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙(𝓪𝓭𝓭𝓻𝓮𝓼𝓼, ...) \
  static_assert(𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟₃₂(0x67, __VA_ARGS__).expected_from().add(⒜₃₂::𝒂𝒅𝒅𝒓𝒆𝒔𝒔₁₆<32>{𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓪𝓭𝓭𝓻𝓮𝓼𝓼}, ⒜₃₂::𝔢𝔞𝔵));
𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘₁₆(
    ⒜₃₂::𝔦𝔷,
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒃𝒂𝒔𝒆_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        16,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯32_𝔡𝔞𝔱𝔞32>),
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒊𝒏𝒅𝒆𝒙_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        16,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯32_𝔡𝔞𝔱𝔞32>),
    ⒜₃₂::𝔟𝔵,
    ⒜₃₂::𝔟𝔭,
    ⒜₃₂::𝔰𝔦,
    ⒜₃₂::𝔡𝔦);
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙

#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘₁₆_𝖎𝖒𝖕𝖑
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘₁₆

// 32-bit/64-bit memory access, low registers. Allowed in 16-bit mode, 32-bit mode, and 64-bit mode.
// Tested options: ₛₖᵢₚ/𝔦𝔷/𝔫𝔬_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯/𝔢𝔞𝔵/𝔢𝔠𝔵/𝔢𝔡𝔵/𝔢𝔟𝔵/𝔢𝔰𝔭/𝔢𝔟𝔭/𝔢𝔰𝔦/𝔢𝔡𝔦 for base, ₛₖᵢₚ/𝔦𝔷/𝔫𝔬_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯/𝔢𝔞𝔵/𝔢𝔠𝔵/𝔢𝔡𝔵/𝔢𝔟𝔵/𝔢𝔟𝔭/𝔢𝔰𝔦/𝔢𝔡𝔦
// for index, ₛₖᵢₚ/0/1/1000 for disp. Note: disp is only tested with some index/base combos to reduce size of test.
#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘(𝓮𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮, 𝓮𝓪𝔁, 𝓮𝓬𝔁, 𝓮𝓭𝔁, 𝓮𝓫𝔁, 𝓮𝓼𝓹, 𝓮𝓫𝓹, 𝓮𝓼𝓲, 𝓮𝓭𝓲) \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑( \
      𝓮𝓲𝔃, \
      (𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮{𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔫𝔬_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯}),  /* NOLINT(bugprone-macro-parentheses) */ \
      (𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮{𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔫𝔬_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯}), /* NOLINT(bugprone-macro-parentheses) */ \
      𝓮𝓪𝔁, \
      𝓮𝓬𝔁, \
      𝓮𝓭𝔁, \
      𝓮𝓫𝔁, \
      𝓮𝓼𝓹, \
      𝓮𝓫𝓹, \
      𝓮𝓼𝓲, \
      𝓮𝓭𝓲)
#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑(𝓮𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓮𝓪𝔁, 𝓮𝓬𝔁, 𝓮𝓭𝔁, 𝓮𝓫𝔁, 𝓮𝓼𝓹, 𝓮𝓫𝓹, 𝓮𝓼𝓲, 𝓮𝓭𝓲) \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑_𝖈𝖔𝖒𝖕𝖆𝖙(𝓮𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓮𝓪𝔁, 𝓮𝓬𝔁, 𝓮𝓭𝔁, 𝓮𝓫𝔁, 𝓮𝓼𝓹, 𝓮𝓫𝓹, 𝓮𝓼𝓲, 𝓮𝓭𝓲) \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑_𝖘𝖈𝖆𝖑𝖊( \
      𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1, 0x00, 𝓮𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓮𝓪𝔁, 𝓮𝓬𝔁, 𝓮𝓭𝔁, 𝓮𝓫𝔁, 𝓮𝓼𝓹, 𝓮𝓫𝓹, 𝓮𝓼𝓲, 𝓮𝓭𝓲) \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑_𝖘𝖈𝖆𝖑𝖊( \
      𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2, 0x40, 𝓮𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓮𝓪𝔁, 𝓮𝓬𝔁, 𝓮𝓭𝔁, 𝓮𝓫𝔁, 𝓮𝓼𝓹, 𝓮𝓫𝓹, 𝓮𝓼𝓲, 𝓮𝓭𝓲) \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑_𝖘𝖈𝖆𝖑𝖊( \
      𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4, 0x80, 𝓮𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓮𝓪𝔁, 𝓮𝓬𝔁, 𝓮𝓭𝔁, 𝓮𝓫𝔁, 𝓮𝓼𝓹, 𝓮𝓫𝓹, 𝓮𝓼𝓲, 𝓮𝓭𝓲) \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑_𝖘𝖈𝖆𝖑𝖊( \
      𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8, 0xc0, 𝓮𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓮𝓪𝔁, 𝓮𝓬𝔁, 𝓮𝓭𝔁, 𝓮𝓫𝔁, 𝓮𝓼𝓹, 𝓮𝓫𝓹, 𝓮𝓼𝓲, 𝓮𝓭𝓲)
// clang-format off
// These are few rare cases which are encoded in “legacy” modes than in new, x86-64 mode.
#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑_𝖈𝖔𝖒𝖕𝖆𝖙(𝓮𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓮𝓪𝔁, 𝓮𝓬𝔁, 𝓮𝓭𝔁, 𝓮𝓫𝔁, 𝓮𝓼𝓹, 𝓮𝓫𝓹, 𝓮𝓼𝓲, 𝓮𝓭𝓲) \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃)), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻)), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8), 0x01, 0x05, 0x00, 0x00, 0x00, 0x00); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.disp = 100000000), 0x01, 0x05, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .disp = 100000000), 0x01, 0x05, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 100000000), 0x01, 0x05, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1, .disp = 1), 0x01, 0x05, 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2, .disp = 1000), 0x01, 0x05, 0xe8, 0x03, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4, .disp = 1000000), 0x01, 0x05, 0x40, 0x42, 0x0f, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8, .disp = 100000000), 0x01, 0x05, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1, .disp = 1), 0x01, 0x05, 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2, .disp = 1000), 0x01, 0x05, 0xe8, 0x03, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4, .disp = 1000000), 0x01, 0x05, 0x40, 0x42, 0x0f, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8, .disp = 100000000), 0x01, 0x05, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1, .disp = 1), 0x01, 0x05, 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2, .disp = 1000), 0x01, 0x05, 0xe8, 0x03, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4, .disp = 1000000), 0x01, 0x05, 0x40, 0x42, 0x0f, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8, .disp = 100000000), 0x01, 0x05, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1, .disp = 1), 0x01, 0x05, 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2, .disp = 1000), 0x01, 0x05, 0xe8, 0x03, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4, .disp = 1000000), 0x01, 0x05, 0x40, 0x42, 0x0f, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8, .disp = 100000000), 0x01, 0x05, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1, .disp = 1), 0x01, 0x05, 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2, .disp = 1000), 0x01, 0x05, 0xe8, 0x03, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4, .disp = 1000000), 0x01, 0x05, 0x40, 0x42, 0x0f, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8, .disp = 100000000), 0x01, 0x05, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1, .disp = 1), 0x01, 0x05, 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2, .disp = 1000), 0x01, 0x05, 0xe8, 0x03, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4, .disp = 1000000), 0x01, 0x05, 0x40, 0x42, 0x0f, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8, .disp = 100000000), 0x01, 0x05, 0x00, 0xe1, 0xf5, 0x05);
#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑_𝖘𝖈𝖆𝖑𝖊(𝓼𝓬𝓪𝓵𝓮, 𝓼𝓲𝓫, 𝓮𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓮𝓪𝔁, 𝓮𝓬𝔁, 𝓮𝓭𝔁, 𝓮𝓫𝔁, 𝓮𝓼𝓹, 𝓮𝓫𝓹, 𝓮𝓼𝓲, 𝓮𝓭𝓲) \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x20 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x00 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x08 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x10 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x18 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x28 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x30 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x38 + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x40, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x20 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x40, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x00 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x08 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x10 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x18 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x28 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x30 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x38 + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x80, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x20 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x80, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x00 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x08 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x10 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x18 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x28 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x30 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓪𝔁), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x38 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x21 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x01 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x09 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x11 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x19 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x29 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x31 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x39 + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x41, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x21 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x41, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x01 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x09 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x11 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x19 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x29 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x31 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x39 + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x81, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x21 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x81, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x01 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x09 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x11 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x19 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x29 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x31 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓬𝔁), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x39 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x02); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x22 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x02); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x02 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x0a + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x12 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x1a + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x2a + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x32 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x3a + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x42, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x22 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x42, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x02 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x0a + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x12 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x1a + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x2a + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x32 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x3a + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x82, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x22 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x82, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x02 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x0a + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x12 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x1a + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x2a + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x32 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝔁), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x3a + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x23 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x03 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x0b + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x13 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x1b + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x2b + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x33 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x3b + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x43, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x23 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x43, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x03 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x0b + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x13 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x1b + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x2b + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x33 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x3b + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x83, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x23 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x83, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x03 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x0b + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x13 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x1b + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x2b + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x33 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝔁), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x3b + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x24); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x24 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x24); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x04 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x0c + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x14 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x1c + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x2c + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x34 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x3c + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x24, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x24 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x24, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x04 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x0c + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x14 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x1c + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x2c + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x34 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x3c + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x24, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x24 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x24, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x04 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x0c + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x14 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x1c + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x2c + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x34 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓹), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x3c + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x45, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x44, 0x25 + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x45, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x44, 0x05 + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x44, 0x0d + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x44, 0x15 + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x44, 0x1d + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x44, 0x2d + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x44, 0x35 + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x44, 0x3d + (𝓼𝓲𝓫), 0x00); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x45, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x25 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x45, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x05 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x0d + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x15 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x1d + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x2d + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x35 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x3d + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x85, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x25 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x85, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x05 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x0d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x15 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x1d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x2d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x35 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓫𝓹), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x3d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x06); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x26 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x06); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x06 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x0e + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x16 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x1e + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x2e + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x36 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x3e + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x46, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x26 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x46, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x06 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x0e + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x16 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x1e + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x2e + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x36 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x3e + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x86, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x26 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x86, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x06 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x0e + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x16 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x1e + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x2e + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x36 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓼𝓲), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x3e + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x07); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x27 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x07); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x07 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x0f + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x17 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x1f + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x2f + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x37 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x01, 0x04, 0x3f + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x47, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x27 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x47, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x07 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x0f + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x17 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x1f + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x2f + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x37 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x01, 0x44, 0x3f + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x87, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x27 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x87, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x07 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x0f + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x17 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x1f + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x2f + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x37 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓭𝓲), .index = (𝓮𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x01, 0x84, 0x3f + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05);
// clang-format on

// 16-bit assembler. Uses address size prefix (0x67).
#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙(𝓪𝓭𝓭𝓻𝓮𝓼𝓼, ...) \
  static_assert(𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟₁₆(0x67, __VA_ARGS__).expected_from().add(⒜₁₆::𝒂𝒅𝒅𝒓𝒆𝒔𝒔₃₂<16>{𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓪𝓭𝓭𝓻𝓮𝓼𝓼}, ⒜₁₆::𝔞𝔵));
𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘(
    ⒜₁₆::𝔢𝔦𝔷,
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒈𝒑_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        32,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯16_𝔡𝔞𝔱𝔞16>),
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒊𝒏𝒅𝒆𝒙_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        32,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯16_𝔡𝔞𝔱𝔞16>),
    ⒜₁₆::𝔢𝔞𝔵,
    ⒜₁₆::𝔢𝔠𝔵,
    ⒜₁₆::𝔢𝔡𝔵,
    ⒜₁₆::𝔢𝔟𝔵,
    ⒜₁₆::𝔢𝔰𝔭,
    ⒜₁₆::𝔢𝔟𝔭,
    ⒜₁₆::𝔢𝔰𝔦,
    ⒜₁₆::𝔢𝔡𝔦);
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙

#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙(𝓪𝓭𝓭𝓻𝓮𝓼𝓼, ...) \
  static_assert( \
      𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟ₐ₁₆ᵈ³²(0x67, __VA_ARGS__).expected_from().add(⒜ₐ₁₆ᵈ³²::𝒂𝒅𝒅𝒓𝒆𝒔𝒔₃₂<32>{𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓪𝓭𝓭𝓻𝓮𝓼𝓼}, ⒜ₐ₁₆ᵈ³²::𝔢𝔞𝔵));
𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘(
    ⒜ₐ₁₆ᵈ³²::𝔢𝔦𝔷,
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒈𝒑_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        32,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯16_𝔡𝔞𝔱𝔞32>),
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒊𝒏𝒅𝒆𝒙_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        32,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯16_𝔡𝔞𝔱𝔞32>),
    ⒜ₐ₁₆ᵈ³²::𝔢𝔞𝔵,
    ⒜ₐ₁₆ᵈ³²::𝔢𝔠𝔵,
    ⒜ₐ₁₆ᵈ³²::𝔢𝔡𝔵,
    ⒜ₐ₁₆ᵈ³²::𝔢𝔟𝔵,
    ⒜ₐ₁₆ᵈ³²::𝔢𝔰𝔭,
    ⒜ₐ₁₆ᵈ³²::𝔢𝔟𝔭,
    ⒜ₐ₁₆ᵈ³²::𝔢𝔰𝔦,
    ⒜ₐ₁₆ᵈ³²::𝔢𝔡𝔦);
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙

// 32-bit assembler. Doesn't use address size prefix.
#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙(𝓪𝓭𝓭𝓻𝓮𝓼𝓼, ...) \
  static_assert(𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟ₐ₃₂ᵈ¹⁶(__VA_ARGS__).expected_from().add(⒜ₐ₃₂ᵈ¹⁶::𝒂𝒅𝒅𝒓𝒆𝒔𝒔₃₂<16>{𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓪𝓭𝓭𝓻𝓮𝓼𝓼}, ⒜ₐ₃₂ᵈ¹⁶::𝔞𝔵));
𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘(
    ⒜ₐ₃₂ᵈ¹⁶::𝔢𝔦𝔷,
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒈𝒑_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        32,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯32_𝔡𝔞𝔱𝔞16>),
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒊𝒏𝒅𝒆𝒙_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        32,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯32_𝔡𝔞𝔱𝔞16>),
    ⒜ₐ₃₂ᵈ¹⁶::𝔢𝔞𝔵,
    ⒜ₐ₃₂ᵈ¹⁶::𝔢𝔠𝔵,
    ⒜ₐ₃₂ᵈ¹⁶::𝔢𝔡𝔵,
    ⒜ₐ₃₂ᵈ¹⁶::𝔢𝔟𝔵,
    ⒜ₐ₃₂ᵈ¹⁶::𝔢𝔰𝔭,
    ⒜ₐ₃₂ᵈ¹⁶::𝔢𝔟𝔭,
    ⒜ₐ₃₂ᵈ¹⁶::𝔢𝔰𝔦,
    ⒜ₐ₃₂ᵈ¹⁶::𝔢𝔡𝔦);
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙

#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙(𝓪𝓭𝓭𝓻𝓮𝓼𝓼, ...) \
  static_assert(𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟₃₂(__VA_ARGS__).expected_from().add(⒜₃₂::𝒂𝒅𝒅𝒓𝒆𝒔𝒔₃₂<32>{𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓪𝓭𝓭𝓻𝓮𝓼𝓼}, ⒜₃₂::𝔢𝔞𝔵));
𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘(
    ⒜₃₂::𝔢𝔦𝔷,
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒈𝒑_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        32,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯32_𝔡𝔞𝔱𝔞32>),
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒊𝒏𝒅𝒆𝒙_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        32,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯32_𝔡𝔞𝔱𝔞32>),
    ⒜₃₂::𝔢𝔞𝔵,
    ⒜₃₂::𝔢𝔠𝔵,
    ⒜₃₂::𝔢𝔡𝔵,
    ⒜₃₂::𝔢𝔟𝔵,
    ⒜₃₂::𝔢𝔰𝔭,
    ⒜₃₂::𝔢𝔟𝔭,
    ⒜₃₂::𝔢𝔰𝔦,
    ⒜₃₂::𝔢𝔡𝔦);
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙

// 64-bit assembler. Uses address size prefix (0x67) and encodes some rare cases differently. Only test 32-bit like registers.
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑_𝖈𝖔𝖒𝖕𝖆𝖙
// clang-format off
#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑_𝖈𝖔𝖒𝖕𝖆𝖙(𝓮𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓮𝓪𝔁, 𝓮𝓬𝔁, 𝓮𝓭𝔁, 𝓮𝓫𝔁, 𝓮𝓼𝓹, 𝓮𝓫𝓹, 𝓮𝓼𝓲, 𝓮𝓭𝓲) \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃)), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻)), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8), 0x01, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.disp = 100000000), 0x01, 0x04, 0x25, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .disp = 100000000), 0x01, 0x04, 0x25, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .disp = 100000000), 0x01, 0x04, 0x25, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1, .disp = 1), 0x01, 0x04, 0x25, 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2, .disp = 1000), 0x01, 0x04, 0x25, 0xe8, 0x03, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4, .disp = 1000000), 0x01, 0x04, 0x25, 0x40, 0x42, 0x0f, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8, .disp = 100000000), 0x01, 0x04, 0x25, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1, .disp = 1), 0x01, 0x04, 0x25, 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2, .disp = 1000), 0x01, 0x04, 0x25, 0xe8, 0x03, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4, .disp = 1000000), 0x01, 0x04, 0x25, 0x40, 0x42, 0x0f, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8, .disp = 100000000), 0x01, 0x04, 0x25, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1, .disp = 1), 0x01, 0x04, 0x25, 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2, .disp = 1000), 0x01, 0x04, 0x25, 0xe8, 0x03, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4, .disp = 1000000), 0x01, 0x04, 0x25, 0x40, 0x42, 0x0f, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8, .disp = 100000000), 0x01, 0x04, 0x25, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1, .disp = 1), 0x01, 0x04, 0x25, 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2, .disp = 1000), 0x01, 0x04, 0x25, 0xe8, 0x03, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4, .disp = 1000000), 0x01, 0x04, 0x25, 0x40, 0x42, 0x0f, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8, .disp = 100000000), 0x01, 0x04, 0x25, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1, .disp = 1), 0x01, 0x04, 0x25, 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2, .disp = 1000), 0x01, 0x04, 0x25, 0xe8, 0x03, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4, .disp = 1000000), 0x01, 0x04, 0x25, 0x40, 0x42, 0x0f, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓮𝓲𝔃), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8, .disp = 100000000), 0x01, 0x04, 0x25, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1, .disp = 1), 0x01, 0x04, 0x25, 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2, .disp = 1000), 0x01, 0x04, 0x25, 0xe8, 0x03, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4, .disp = 1000000), 0x01, 0x04, 0x25, 0x40, 0x42, 0x0f, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8, .disp = 100000000), 0x01, 0x04, 0x25, 0x00, 0xe1, 0xf5, 0x05);
// clang-format on
#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙(𝓪𝓭𝓭𝓻𝓮𝓼𝓼, ...) \
  static_assert(𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟₆₄(0x67, __VA_ARGS__).expected_from().add(⒜₆₄::𝒂𝒅𝒅𝒓𝒆𝒔𝒔₃₂<32>{𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓪𝓭𝓭𝓻𝓮𝓼𝓼}, ⒜₆₄::𝔢𝔞𝔵));
𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘(
    ⒜₆₄::𝔢𝔦𝔷,
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒈𝒑_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        32,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯64_𝔡𝔞𝔱𝔞32>),
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒊𝒏𝒅𝒆𝒙_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        32,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯64_𝔡𝔞𝔱𝔞32>),
    ⒜₆₄::𝔢𝔞𝔵,
    ⒜₆₄::𝔢𝔠𝔵,
    ⒜₆₄::𝔢𝔡𝔵,
    ⒜₆₄::𝔢𝔟𝔵,
    ⒜₆₄::𝔢𝔰𝔭,
    ⒜₆₄::𝔢𝔟𝔭,
    ⒜₆₄::𝔢𝔰𝔦,
    ⒜₆₄::𝔢𝔡𝔦);
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙

// 64-bit assembler. Doesn't use size prefix (0x67) and uses 64-bit reegisters. Only test 32-bit like registers.
#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙(𝓪𝓭𝓭𝓻𝓮𝓼𝓼, ...) \
  static_assert(𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟₆₄(__VA_ARGS__).expected_from().add(⒜₆₄::𝒂𝒅𝒅𝒓𝒆𝒔𝒔₆₄<32>{𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓪𝓭𝓭𝓻𝓮𝓼𝓼}, ⒜₆₄::𝔢𝔞𝔵));
𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘(
    ⒜₆₄::𝔯𝔦𝔷,
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒈𝒑_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        64,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯64_𝔡𝔞𝔱𝔞32>),
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒊𝒏𝒅𝒆𝒙_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        64,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯64_𝔡𝔞𝔱𝔞32>),
    ⒜₆₄::𝔯𝔞𝔵,
    ⒜₆₄::𝔯𝔠𝔵,
    ⒜₆₄::𝔯𝔡𝔵,
    ⒜₆₄::𝔯𝔟𝔵,
    ⒜₆₄::𝔯𝔰𝔭,
    ⒜₆₄::𝔯𝔟𝔭,
    ⒜₆₄::𝔯𝔰𝔦,
    ⒜₆₄::𝔯𝔡𝔦);
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙

#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑_𝖘𝖈𝖆𝖑𝖊
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑_𝖈𝖔𝖒𝖕𝖆𝖙
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘

// 32-bit/64-bit memory access, high registers. Allowed in 64-bit mode only.
// Tested options: ₛₖᵢₚ/𝔦𝔷/𝔫𝔬_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯/𝔯𝔞𝔵/𝔯𝔠𝔵/𝔯𝔡𝔵/𝔯𝔟𝔵/𝔯𝔰𝔭/𝔯𝔟𝔭/𝔯𝔰𝔦/𝔯𝔡𝔦/𝔯8/𝔯9/10/𝔯11/𝔯12/13/𝔯14/𝔯15 for base,
// ₛₖᵢₚ/𝔦𝔷/𝔫𝔬_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯/𝔢𝔯𝔞𝔵/𝔯𝔠𝔵/𝔯𝔡𝔵/𝔯𝔟𝔵/𝔯𝔟𝔭/𝔯𝔰𝔦/𝔯𝔡𝔦/𝔯8/𝔯9/10/𝔯11/𝔯12/13/𝔯14/𝔯15 for index, ₛₖᵢₚ/0/1/1000 for disp.
// Note: combos with low registers only are not tested because they are tested with 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖑𝖔𝖜𝖗𝖊𝖌𝖘.
// Note: disp is only tested with some index/base combos to reduce size of test.
// clang-format off
#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖍𝖎𝖌𝖍𝖗𝖊𝖌𝖘( 𝓻𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮, 𝓻𝓪𝔁, 𝓻𝓬𝔁, 𝓻𝓭𝔁, 𝓻𝓫𝔁, 𝓻𝓼𝓹, 𝓻𝓫𝓹, 𝓻𝓼𝓲, 𝓻𝓭𝓲, 𝓻8, 𝓻9, 𝓻10, 𝓻11, 𝓻12, 𝓻13, 𝓻14, 𝓻15) \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖍𝖎𝖌𝖍𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑( 𝓻𝓲𝔃, \
      (𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮{𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔫𝔬_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯}),  /* NOLINT(bugprone-macro-parentheses) */ \
      (𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮{𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔫𝔬_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯}), /* NOLINT(bugprone-macro-parentheses) */ \
      𝓻𝓪𝔁, 𝓻𝓬𝔁, 𝓻𝓭𝔁, 𝓻𝓫𝔁, 𝓻𝓼𝓹, 𝓻𝓫𝓹, 𝓻𝓼𝓲, 𝓻𝓭𝓲, 𝓻8, 𝓻9, 𝓻10, 𝓻11, 𝓻12, 𝓻13, 𝓻14, 𝓻15)
#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖍𝖎𝖌𝖍𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑( \
    𝓻𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓻𝓪𝔁, 𝓻𝓬𝔁, 𝓻𝓭𝔁, 𝓻𝓫𝔁, 𝓻𝓼𝓹, 𝓻𝓫𝓹, 𝓻𝓼𝓲, 𝓻𝓭𝓲, 𝓻8, 𝓻9, 𝓻10, 𝓻11, 𝓻12, 𝓻13, 𝓻14, 𝓻15) \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖍𝖎𝖌𝖍𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑_𝖘𝖈𝖆𝖑𝖊( \
      𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵1, 0x00, 𝓻𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓻𝓪𝔁, 𝓻𝓬𝔁, 𝓻𝓭𝔁, 𝓻𝓫𝔁, 𝓻𝓼𝓹, 𝓻𝓫𝓹, 𝓻𝓼𝓲, 𝓻𝓭𝓲, 𝓻8, 𝓻9, 𝓻10, 𝓻11, 𝓻12, 𝓻13, 𝓻14, 𝓻15) \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖍𝖎𝖌𝖍𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑_𝖘𝖈𝖆𝖑𝖊( \
      𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵2, 0x40, 𝓻𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓻𝓪𝔁, 𝓻𝓬𝔁, 𝓻𝓭𝔁, 𝓻𝓫𝔁, 𝓻𝓼𝓹, 𝓻𝓫𝓹, 𝓻𝓼𝓲, 𝓻𝓭𝓲, 𝓻8, 𝓻9, 𝓻10, 𝓻11, 𝓻12, 𝓻13, 𝓻14, 𝓻15) \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖍𝖎𝖌𝖍𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑_𝖘𝖈𝖆𝖑𝖊( \
      𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵4, 0x80, 𝓻𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓻𝓪𝔁, 𝓻𝓬𝔁, 𝓻𝓭𝔁, 𝓻𝓫𝔁, 𝓻𝓼𝓹, 𝓻𝓫𝓹, 𝓻𝓼𝓲, 𝓻𝓭𝓲, 𝓻8, 𝓻9, 𝓻10, 𝓻11, 𝓻12, 𝓻13, 𝓻14, 𝓻15) \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖍𝖎𝖌𝖍𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑_𝖘𝖈𝖆𝖑𝖊( \
      𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝔵8, 0xc0, 𝓻𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓻𝓪𝔁, 𝓻𝓬𝔁, 𝓻𝓭𝔁, 𝓻𝓫𝔁, 𝓻𝓼𝓹, 𝓻𝓫𝓹, 𝓻𝓼𝓲, 𝓻𝓭𝓲, 𝓻8, 𝓻9, 𝓻10, 𝓻11, 𝓻12, 𝓻13, 𝓻14, 𝓻15)
#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖍𝖎𝖌𝖍𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑_𝖘𝖈𝖆𝖑𝖊(𝓼𝓬𝓪𝓵𝓮, 𝓼𝓲𝓫, 𝓻𝓲𝔃, 𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻, 𝓻𝓪𝔁, 𝓻𝓬𝔁, 𝓻𝓭𝔁, 𝓻𝓫𝔁, 𝓻𝓼𝓹, 𝓻𝓫𝓹, 𝓻𝓼𝓲, 𝓻𝓭𝓲, 𝓻8, 𝓻9, 𝓻10, 𝓻11, 𝓻12, 𝓻13, 𝓻14, 𝓻15) \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓲𝔃), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x00, 0x00, 0x00, 0x00); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x01, 0x00, 0x00, 0x00); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x05 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x0d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x15 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x1d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x25 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x2d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x35 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓷𝓸_𝓫𝓪𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x04, 0x3d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x00 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x08 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x10 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x18 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x20 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x28 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x30 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x38 + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x00 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x08 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x10 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x18 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x20 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x28 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x30 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x38 + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x00 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x08 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x10 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x18 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x20 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x28 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x30 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓪𝔁), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x38 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x01 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x09 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x11 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x19 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x21 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x29 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x31 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x39 + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x01 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x09 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x11 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x19 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x21 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x29 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x31 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x39 + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x01 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x09 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x11 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x19 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x21 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x29 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x31 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓬𝔁), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x39 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x02 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x0a + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x12 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x1a + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x22 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x2a + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x32 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x3a + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x02 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x0a + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x12 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x1a + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x22 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x2a + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x32 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x3a + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x02 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x0a + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x12 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x1a + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x22 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x2a + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x32 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝔁), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x3a + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x03 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x0b + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x13 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x1b + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x23 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x2b + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x33 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x3b + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x03 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x0b + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x13 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x1b + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x23 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x2b + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x33 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x3b + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x03 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x0b + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x13 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x1b + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x23 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x2b + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x33 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝔁), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x3b + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x04 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x0c + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x14 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x1c + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x24 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x2c + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x34 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x3c + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x04 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x0c + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x14 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x1c + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x24 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x2c + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x34 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x3c + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x04 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x0c + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x14 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x1c + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x24 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x2c + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x34 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓹), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x3c + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x44, 0x05 + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x44, 0x0d + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x44, 0x15 + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x44, 0x1d + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x44, 0x25 + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x44, 0x2d + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x44, 0x35 + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x44, 0x3d + (𝓼𝓲𝓫), 0x00); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x05 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x0d + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x15 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x1d + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x25 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x2d + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x35 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x3d + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x05 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x0d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x15 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x1d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x25 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x2d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x35 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓫𝓹), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x3d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x06 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x0e + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x16 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x1e + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x26 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x2e + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x36 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x3e + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x06 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x0e + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x16 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x1e + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x26 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x2e + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x36 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x3e + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x06 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x0e + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x16 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x1e + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x26 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x2e + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x36 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓼𝓲), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x3e + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x07 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x0f + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x17 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x1f + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x27 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x2f + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x37 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x42, 0x01, 0x04, 0x3f + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x07 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x0f + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x17 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x1f + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x27 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x2f + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x37 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x42, 0x01, 0x44, 0x3f + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x07 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x0f + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x17 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x1f + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x27 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x2f + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x37 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻𝓭𝓲), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x42, 0x01, 0x84, 0x3f + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x20 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x00 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x08 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x10 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x18 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x28 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x30 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x38 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x00 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x08 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x10 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x18 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x20 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x28 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x30 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x38 + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x40, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x20 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x40, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x00 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x08 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x10 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x18 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x28 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x30 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x38 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x00 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x08 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x10 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x18 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x20 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x28 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x30 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x38 + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x80, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x20 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x80, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x00 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x08 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x10 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x18 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x28 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x30 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x38 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x00 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x08 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x10 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x18 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x20 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x28 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x30 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻8), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x38 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x21 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x01 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x09 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x11 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x19 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x29 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x31 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x39 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x01 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x09 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x11 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x19 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x21 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x29 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x31 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x39 + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x41, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x21 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x41, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x01 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x09 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x11 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x19 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x29 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x31 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x39 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x01 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x09 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x11 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x19 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x21 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x29 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x31 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x39 + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x81, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x21 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x81, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x01 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x09 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x11 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x19 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x29 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x31 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x39 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x01 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x09 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x11 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x19 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x21 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x29 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x31 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻9), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x39 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x02); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x22 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x02); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x02 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x0a + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x12 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x1a + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x2a + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x32 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x3a + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x02 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x0a + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x12 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x1a + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x22 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x2a + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x32 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x3a + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x42, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x22 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x42, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x02 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x0a + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x12 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x1a + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x2a + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x32 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x3a + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x02 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x0a + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x12 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x1a + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x22 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x2a + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x32 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x3a + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x82, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x22 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x82, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x02 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x0a + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x12 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x1a + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x2a + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x32 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x3a + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x02 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x0a + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x12 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x1a + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x22 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x2a + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x32 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻10), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x3a + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x23 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x03); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x03 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x0b + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x13 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x1b + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x2b + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x33 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x3b + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x03 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x0b + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x13 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x1b + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x23 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x2b + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x33 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x3b + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x43, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x23 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x43, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x03 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x0b + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x13 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x1b + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x2b + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x33 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x3b + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x03 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x0b + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x13 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x1b + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x23 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x2b + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x33 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x3b + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x83, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x23 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x83, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x03 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x0b + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x13 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x1b + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x2b + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x33 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x3b + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x03 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x0b + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x13 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x1b + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x23 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x2b + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x33 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻11), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x3b + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x24); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x24 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x24); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x04 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x0c + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x14 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x1c + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x2c + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x34 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x3c + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x04 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x0c + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x14 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x1c + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x24 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x2c + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x34 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x3c + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x24, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x24 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x24, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x04 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x0c + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x14 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x1c + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x2c + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x34 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x3c + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x04 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x0c + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x14 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x1c + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x24 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x2c + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x34 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x3c + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x24, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x24 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x24, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x04 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x0c + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x14 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x1c + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x2c + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x34 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x3c + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x04 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x0c + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x14 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x1c + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x24 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x2c + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x34 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻12), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x3c + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x45, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x44, 0x25 + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x45, 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x44, 0x05 + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x44, 0x0d + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x44, 0x15 + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x44, 0x1d + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x44, 0x2d + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x44, 0x35 + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x44, 0x3d + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x44, 0x05 + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x44, 0x0d + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x44, 0x15 + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x44, 0x1d + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x44, 0x25 + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x44, 0x2d + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x44, 0x35 + (𝓼𝓲𝓫), 0x00); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x44, 0x3d + (𝓼𝓲𝓫), 0x00); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x45, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x25 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x45, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x05 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x0d + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x15 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x1d + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x2d + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x35 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x3d + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x05 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x0d + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x15 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x1d + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x25 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x2d + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x35 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x3d + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x85, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x25 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x85, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x05 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x0d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x15 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x1d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x2d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x35 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x3d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x05 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x0d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x15 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x1d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x25 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x2d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x35 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻13), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x3d + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x06); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x26 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x06); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x06 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x0e + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x16 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x1e + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x2e + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x36 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x3e + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x06 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x0e + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x16 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x1e + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x26 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x2e + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x36 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x3e + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x46, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x26 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x46, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x06 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x0e + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x16 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x1e + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x2e + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x36 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x3e + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x06 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x0e + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x16 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x1e + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x26 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x2e + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x36 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x3e + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x86, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x26 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x86, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x06 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x0e + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x16 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x1e + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x2e + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x36 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x3e + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x06 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x0e + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x16 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x1e + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x26 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x2e + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x36 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻14), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x3e + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x07); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x27 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x07); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x07 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x0f + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x17 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x1f + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x2f + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x37 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x41, 0x01, 0x04, 0x3f + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x07 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x0f + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x17 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x1f + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x27 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x2f + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x37 + (𝓼𝓲𝓫)); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮)), 0x43, 0x01, 0x04, 0x3f + (𝓼𝓲𝓫)); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x47, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x27 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x47, 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x07 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x0f + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x17 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x1f + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x2f + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x37 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x41, 0x01, 0x44, 0x3f + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x07 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x0f + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x17 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x1f + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x27 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x2f + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x37 + (𝓼𝓲𝓫), 0x01); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 1), 0x43, 0x01, 0x44, 0x3f + (𝓼𝓲𝓫), 0x01); \
\
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x87, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓲𝔃), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x27 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓷𝓸_𝓲𝓷𝓭𝓮𝔁_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x87, 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓪𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x07 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓬𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x0f + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓭𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x17 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓫𝔁), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x1f + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓫𝓹), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x2f + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓼𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x37 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻𝓭𝓲), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x41, 0x01, 0x84, 0x3f + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻8), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x07 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻9), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x0f + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻10), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x17 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻11), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x1f + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻12), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x27 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻13), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x2f + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻14), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x37 + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05); \
  𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙((.base = (𝓻15), .index = (𝓻15), .scale = (𝓼𝓬𝓪𝓵𝓮), .disp = 100000000), 0x43, 0x01, 0x84, 0x3f + (𝓼𝓲𝓫), 0x00, 0xe1, 0xf5, 0x05);
// clang-format on

#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙(𝓪𝓭𝓭𝓻𝓮𝓼𝓼, ...) \
  static_assert(𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟₆₄(0x67, __VA_ARGS__).expected_from().add(⒜₆₄::𝒂𝒅𝒅𝒓𝒆𝒔𝒔₃₂<32>{𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓪𝓭𝓭𝓻𝓮𝓼𝓼}, ⒜₆₄::𝔢𝔞𝔵));
𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖍𝖎𝖌𝖍𝖗𝖊𝖌𝖘(
    ⒜₆₄::𝔢𝔦𝔷,
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒈𝒑_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        32,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯64_𝔡𝔞𝔱𝔞32>),
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒊𝒏𝒅𝒆𝒙_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        32,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯64_𝔡𝔞𝔱𝔞32>),
    ⒜₆₄::𝔢𝔞𝔵,
    ⒜₆₄::𝔢𝔠𝔵,
    ⒜₆₄::𝔢𝔡𝔵,
    ⒜₆₄::𝔢𝔟𝔵,
    ⒜₆₄::𝔢𝔰𝔭,
    ⒜₆₄::𝔢𝔟𝔭,
    ⒜₆₄::𝔢𝔰𝔦,
    ⒜₆₄::𝔢𝔡𝔦,
    ⒜₆₄::𝔯8𝔡,
    ⒜₆₄::𝔯9𝔡,
    ⒜₆₄::𝔯10𝔡,
    ⒜₆₄::𝔯11𝔡,
    ⒜₆₄::𝔯12𝔡,
    ⒜₆₄::𝔯13𝔡,
    ⒜₆₄::𝔯14𝔡,
    ⒜₆₄::𝔯15𝔡);
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙

// 64-bit assembler. Doesn't use size prefix (0x67) and uses 64-bit reegisters. Only test 32-bit like registers.
#define 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙(𝓪𝓭𝓭𝓻𝓮𝓼𝓼, ...) \
  static_assert(𝑡𝑒𝑠𝑡_𝑎𝑠𝑠𝑒𝑚𝑏𝑙𝑒𝑟₆₄(__VA_ARGS__).expected_from().add(⒜₆₄::𝒂𝒅𝒅𝒓𝒆𝒔𝒔₆₄<32>{𝖞𝖆𝖈𝖊_𝖚𝖓𝖇𝖗𝖆𝖈𝖊 𝓪𝓭𝓭𝓻𝓮𝓼𝓼}, ⒜₆₄::𝔢𝔞𝔵));
𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖍𝖎𝖌𝖍𝖗𝖊𝖌𝖘(
    ⒜₆₄::𝔯𝔦𝔷,
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒈𝒑_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        64,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯64_𝔡𝔞𝔱𝔞32>),
    (𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒊𝒏𝒅𝒆𝒙_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓_𝒐𝒓_𝒏𝒐_𝒓𝒆𝒈𝒊𝒔𝒕𝒆𝒓<
        64,
        ::𝘆𝗮𝗰𝗲::𝘀𝗮𝗻𝗶𝘁𝘆_𝗰𝗵𝗲𝗰𝗸𝘀::𝔬𝔭𝔱𝔦𝔬𝔫𝔰<&::𝘆𝗮𝗰𝗲::𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝔞𝔰𝔰𝔢𝔯𝔱>,
        𝐨𝐩𝐭𝐢𝐨𝐧𝐬::𝐱𝟖𝟔_𝐦𝐨𝐝𝐞::𝔞𝔡𝔡𝔯64_𝔡𝔞𝔱𝔞32>),
    ⒜₆₄::𝔯𝔞𝔵,
    ⒜₆₄::𝔯𝔠𝔵,
    ⒜₆₄::𝔯𝔡𝔵,
    ⒜₆₄::𝔯𝔟𝔵,
    ⒜₆₄::𝔯𝔰𝔭,
    ⒜₆₄::𝔯𝔟𝔭,
    ⒜₆₄::𝔯𝔰𝔦,
    ⒜₆₄::𝔯𝔡𝔦,
    ⒜₆₄::𝔯8,
    ⒜₆₄::𝔯9,
    ⒜₆₄::𝔯10,
    ⒜₆₄::𝔯11,
    ⒜₆₄::𝔯12,
    ⒜₆₄::𝔯13,
    ⒜₆₄::𝔯14,
    ⒜₆₄::𝔯15);
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙

// clang-format on

#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖍𝖎𝖌𝖍𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑_𝖘𝖈𝖆𝖑𝖊
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖍𝖎𝖌𝖍𝖗𝖊𝖌𝖘_𝖎𝖒𝖕𝖑
#undef 𝖉𝖊𝖋𝖎𝖓𝖊_𝖙𝖊𝖘𝖙𝖘_𝖍𝖎𝖌𝖍𝖗𝖊𝖌𝖘

}  // namespace 𝘆𝗮𝗰𝗲::𝘅𝟴𝟲
